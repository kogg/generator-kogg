{
  "name": "<%= name %>",
  "scripts": {
    "build": "rm -rf dist && run-s build:*",
    "build:web": "NODE_ENV=production webpack -p",
    "check": "run-s check:*",
    "check:css": "stylelint \"**/*.css\" --color --ignore-path .gitignore",
    "check:js": "eslint . --color --ignore-path .gitignore",
    "check:json": "find . -name \\*.json | grep -v node_modules | xargs -n 1 jsonlint --quiet",
    "clean": "rm -rf dist && npm cache clean",
    "coverage:check": "istanbul check-coverage --statements 75 --branches 75 --functions 75 --lines 75",
    "coverage:report": "cat ./coverage/lcov.info | codecov",
    "deploy": "run-s deploy:*",
    "fix": "run-s fix:*",
    "fix:css": "( git diff --staged --name-only --diff-filter=ACMRTUXB | grep \"\\.css$\" | xargs -n 1 stylefmt --config .stylelintrc ) && ( git diff --staged --name-only --diff-filter=ACMRTUXB | grep \"\\.css$\" | xargs -n 1 git add )",
    "fix:js": "( git diff --staged --name-only --diff-filter=ACMRTUXB | grep \"\\.js$\" | xargs -n 1 eslint --fix --color ) && ( git diff --staged --name-only --diff-filter=ACMRTUXB | grep \"\\.js$\" | xargs -n 1 git add )",
    "fix:json": "( git diff --staged --name-only --diff-filter=ACMRTUXB | grep \"\\.json$\" | xargs -n 1 jsonlint --in-place ) && ( git diff --staged --name-only --diff-filter=ACMRTUXB | grep \"\\.json$\" | xargs -n 1 git add )",
    "fix:package_json": "sort-package-json && git add package.json",
    "fixall": "run-s fixall:*",
    "fixall:css": "( find . -name \\*.css | grep -v node_modules | xargs -n 1 stylefmt --config .stylelintrc )",
    "fixall:js": "( find . -name \\*.js | grep -v node_modules | xargs -n 1 eslint --fix --color )",
    "fixall:json": "( find . -name \\*.json | grep -v node_modules | xargs -n 1 jsonlint --in-place )",
    "fixall:package_json": "sort-package-json",
    "release": "semantic-release pre && npm run build && npm run deploy && semantic-release post",
    "start": "if [ \"$NODE_ENV\" = 'production' ]; then foreman start; else foreman start -f Procfile.dev; fi",
    "test": "run-s test:*",
    "test:unit": "istanbul cover -x *.test.js _mocha -- -R spec \"./{,!(node_modules)/**/}*.test.js\"",
    "test:unit:no-cover": "mocha \"./{,!(node_modules)/**/}*.test.js\" --color -R nyan"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    },
    "ghooks": {
      "pre-commit": "npm run fix && npm run check",
      "commit-msg": "validate-commit-msg",
      "pre-push": "npm run check && npm run test:unit:no-cover"
    },
    "validate-commit-msg": {
      "helpMessage": "Install commitizen and use `git cz` instead of `git commit` https://github.com/commitizen/cz-cli#installing-the-command-line-tool"
    }
  },
  "engines": {
    "node": "^6.1.0",
    "npm": "^3.9.0"
  },
  "release": {
    "getLastRelease": "last-release-github"
  }
}